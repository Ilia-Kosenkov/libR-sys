name: Tests

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:

  test_with_bindgen:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (R-${{ matrix.config.r }} rust-${{ matrix.config.rust-version }})
              
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release', rust-version: 'stable-x86_64-pc-windows-msvc'}
          - {os: macOS-latest,   r: 'release', rust-version: 'stable'}
          - {os: ubuntu-20.04,   r: 'release', rust-version: 'stable', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
          # - {os: ubuntu-20.04,   r: 'release', rust-version: 'nightly', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
          # - {os: ubuntu-20.04,   r: 'devel',   rust-version: 'nightly', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}   

    
    defaults:
      run:
        shell: pwsh
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up `msys2` for Windows
        uses: msys2/setup-msys2@v2
        if: runner.os == 'Windows'
        with:
          msystem: MINGW64
          path-type: inherit
          release: false
          update: false
      
      - name: Set up `R`
        uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r }}

      - name: Set up `rust`
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.config.rust-version }}
          default: true
          components: rustfmt, clippy

      - name: Configure Windows
        if: runner.os == 'Windows'
        run: |
          if ($env:RUST_TOOLCHAIN -like "*x86_64*") {
            rustup target add x86_64-pc-windows-gnu ;
            echo "CARGO_BUILD_FLAGS=--target=x86_64-pc-windows-gnu" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append ;
            echo "LIBCLANG_PATH=C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append ;
            echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append ;
          }
          if ($env:RUST_TOOLCHAIN -like "*i686*") {
            rustup target add i686-pc-windows-gnu ;
            echo "CARGO_BUILD_FLAGS=--target=i686-pc-windows-gnu" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append ;
            echo "LIBCLANG_PATH=C:\msys64\mingw32\bin" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append ;
            echo "C:\msys64\mingw32\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append ;
          }
        env: 
          RUST_TOOLCHAIN: ${{ matrix.config.rust-version }}
          

      - name: Configure MacOs
        if: runner.os == 'macOS'
        run: | 
          brew install llvm r
          echo "LIBCLANG_PATH=$(brew --prefix llvm)/lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
      - name: Build & Emit bindings
        id: build
        run: |
          cargo build -vv --features use-bindgen $env:CARGO_BUILD_FLAGS
        env:
          LIBRSYS_BINDINGS_OUTPUT_PATH: generated_bindings

      - name: Run tests
        run: |
          cargo test -vv --features use-bindgen $env:CARGO_BUILD_FLAGS -- --nocapture --test-threads=1

      - name: Run tests on precomputed bindings shipped with libR-sys
        run: cargo test -vv $env:CARGO_BUILD_FLAGS -- --nocapture --test-threads=1


  # test_linux:
  #   name: Run tests (Linux)
  #   runs-on: ubuntu-20.04
  #   strategy:
  #     matrix:
  #       rust-version: [stable, beta, nightly]

  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: ${{ matrix.rust-version }}
  #     - name: Build
  #       id: build
  #       run: cargo build -vv --features use-bindgen
  #       env:
  #         LIBRSYS_BINDINGS_OUTPUT_PATH: generated_bindings
  #     - name: Run tests
  #       run: cargo test -vv --features use-bindgen -- --nocapture --test-threads=1
  #     - name: Upload generated bindings
  #       if: steps.build.outcome == 'success'
  #       uses: actions/upload-artifact@main
  #       with:
  #         name: Linux ${{ matrix.rust-version }} generated bindings
  #         path: generated_bindings
  #     - name: Run tests on precomputed bindings shipped with libR-sys
  #       run: cargo test -vv -- --nocapture --test-threads=1


  # test_macos:
  #   name: Run tests (macOS)
  #   runs-on: macos-latest
  #   strategy:
  #     matrix:
  #       rust-version: [stable]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: ${{ matrix.rust-version }}
  #     - name: Install dependencies
  #       run: brew install llvm r
  #     - name: Set dynamic environment variables
  #       run: echo "LIBCLANG_PATH=$(brew --prefix llvm)/lib" >> $GITHUB_ENV
  #     - name: Build
  #       id: build
  #       run: cargo build -vv --features use-bindgen
  #       env:
  #         LIBRSYS_BINDINGS_OUTPUT_PATH: generated_bindings
  #     - name: Run tests
  #       run: cargo test -vv --features use-bindgen -- --nocapture --test-threads=1
  #     - name: Upload generated bindings shipped with libR-sys
  #       if: steps.build.outcome == 'success'
  #       uses: actions/upload-artifact@main
  #       with:
  #         name: macOS generated bindings
  #         path: generated_bindings
  #     - name: Run tests on precomputed bindings
  #       run: cargo test -vv -- --nocapture --test-threads=1

  # test_windows:
  #   name: Run tests (Windows x86_64)
  #   runs-on: windows-latest
  #   defaults:
  #     run:
  #       shell: msys2 {0}
  #   strategy:
  #     matrix:
  #       rust-version: [stable-x86_64-pc-windows-msvc]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: msys2/setup-msys2@v2
  #       with:
  #         msystem: MINGW64
  #         path-type: inherit
  #         release: false
  #         update: false
  #     - uses: r-lib/actions/setup-r@v1
  #       with:
  #         r-version: 'release'
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: ${{ matrix.rust-version }}
  #         target: x86_64-pc-windows-gnu
  #         default: true
  #         components: rustfmt, clippy
  #     - name: Build
  #       id: build
  #       run: |
  #         cargo build -vv --features use-bindgen --target=x86_64-pc-windows-gnu
  #       env:
  #         LIBCLANG_PATH: C:\msys64\mingw64\bin
  #         LIBRSYS_BINDINGS_OUTPUT_PATH: generated_bindings
      
  #     - name: Run tests
  #       run: cargo test --features use-bindgen --target=x86_64-pc-windows-gnu -- --nocapture --test-threads=1

  #     - name: Upload generated bindings
  #       if: steps.build.outcome == 'success'
  #       uses: actions/upload-artifact@main
  #       with:
  #         name: Windows generated bindings
  #         path: generated_bindings
      
  #     - name: Run tests on precomputed bindings shipped with libR-sys
  #       run: cargo test --target=x86_64-pc-windows-gnu -- --nocapture --test-threads=1


  # test_windows_32bit:
  #   name: Run tests (Windows i686)
  #   runs-on: windows-latest
  #   defaults:
  #     run:
  #       shell: msys2 {0}
  #   strategy:
  #     matrix:
  #       rust-version: [stable-i686-pc-windows-msvc]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: msys2/setup-msys2@v2
  #       with:
  #         msystem: MINGW32
  #         path-type: inherit
  #         release: false
  #         update: false
  #     - uses: r-lib/actions/setup-r@v1
  #       with:
  #         r-version: 'release'
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: ${{ matrix.rust-version }}
  #         default: true
  #         components: rustfmt, clippy
  #         target: i686-pc-windows-gnu

  #     # Ensures that dlls are search in \i386 before any other folder on the PATH
  #     - name: Update path to resolve linking issue
  #       run: echo "C:\R\bin\i386" >> $GITHUB_PATH

  #     - name: Build
  #       id: build
  #       run: |
  #         cargo build -vv --features use-bindgen --target i686-pc-windows-gnu
  #       env:
  #         LIBCLANG_PATH: C:\msys64\mingw32\bin
  #         LIBRSYS_BINDINGS_OUTPUT_PATH: generated_bindings_i686
      
  #     - name: Run tests
  #       run: cargo test --features use-bindgen --target=i686-pc-windows-gnu -- --nocapture --test-threads=1

  #     - name: Upload generated i686 bindings
  #       if: steps.build.outcome == 'success'
  #       uses: actions/upload-artifact@main
  #       with:
  #         name: Windows generated i686 bindings
  #         path: generated_bindings_i686

  #     - name: Run tests on precomputed bindings shipped with libR-sys
  #       run: cargo test --target=i686-pc-windows-gnu -- --nocapture --test-threads=1